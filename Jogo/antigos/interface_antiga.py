#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.1
#  in conjunction with Tcl version 8.6
#    Oct 09, 2025 08:19:40 AM %z  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path
import view.interface_support as interface_support

_location = os.path.dirname(__file__)


_bgcolor = '#d9d9d9'
_fgcolor = 'black'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: interface_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'alt.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('alt')
    style.configure('.', font = "TkDefaultFont")
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("610x723+651+62")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        self.fHistoriaVotacao = tk.Frame(self.top)
        self.fHistoriaVotacao.place(relx=0.016, rely=0.017, relheight=0.325
                , relwidth=0.959)
        self.fHistoriaVotacao.configure(relief='groove')
        self.fHistoriaVotacao.configure(borderwidth="2")
        self.fHistoriaVotacao.configure(relief="groove")
        self.fHistoriaVotacao.configure(background="#d9d9d9")
        self.fHistoriaVotacao.configure(highlightbackground="#d9d9d9")
        self.fHistoriaVotacao.configure(highlightcolor="black")

        _style_code()
        self.Scrolledtext1 = ScrolledText(self.fHistoriaVotacao)
        self.Scrolledtext1.place(relx=0.017, rely=0.043, relheight=0.502
                , relwidth=0.962)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(exportselection="0")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#d9d9d9")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(wrap="none")

        self.Label1 = tk.Label(self.fHistoriaVotacao)
        self.Label1.place(relx=0.451, rely=0.574, height=22, width=55)
        self.Label1.configure(activebackground="#d9d9d9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="black")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Votação''')

        self.btnVotOpcao2 = tk.Button(self.fHistoriaVotacao)
        self.btnVotOpcao2.place(relx=0.349, rely=0.706, height=26, width=67)
        self.btnVotOpcao2.configure(activebackground="#d9d9d9")
        self.btnVotOpcao2.configure(activeforeground="black")
        self.btnVotOpcao2.configure(background="#d9d9d9")
        self.btnVotOpcao2.configure(compound='left')
        self.btnVotOpcao2.configure(disabledforeground="#a3a3a3")
        self.btnVotOpcao2.configure(foreground="black")
        self.btnVotOpcao2.configure(highlightbackground="#d9d9d9")
        self.btnVotOpcao2.configure(highlightcolor="black")
        self.btnVotOpcao2.configure(text='''Opção 2''')

        self.btnVotOpcao1 = tk.Button(self.fHistoriaVotacao)
        self.btnVotOpcao1.place(relx=0.191, rely=0.706, height=26, width=67)
        self.btnVotOpcao1.configure(activebackground="#d9d9d9")
        self.btnVotOpcao1.configure(activeforeground="black")
        self.btnVotOpcao1.configure(background="#d9d9d9")
        self.btnVotOpcao1.configure(compound='left')
        self.btnVotOpcao1.configure(disabledforeground="#a3a3a3")
        self.btnVotOpcao1.configure(foreground="black")
        self.btnVotOpcao1.configure(highlightbackground="#d9d9d9")
        self.btnVotOpcao1.configure(highlightcolor="black")
        self.btnVotOpcao1.configure(text='''Opção 1''')

        self.btnVotOpcao3 = tk.Button(self.fHistoriaVotacao)
        self.btnVotOpcao3.place(relx=0.504, rely=0.706, height=26, width=65)
        self.btnVotOpcao3.configure(activebackground="#d9d9d9")
        self.btnVotOpcao3.configure(activeforeground="black")
        self.btnVotOpcao3.configure(background="#d9d9d9")
        self.btnVotOpcao3.configure(compound='left')
        self.btnVotOpcao3.configure(disabledforeground="#a3a3a3")
        self.btnVotOpcao3.configure(foreground="black")
        self.btnVotOpcao3.configure(highlightbackground="#d9d9d9")
        self.btnVotOpcao3.configure(highlightcolor="black")
        self.btnVotOpcao3.configure(text='''Opção 3''')

        self.btnVotOpcao4 = tk.Button(self.fHistoriaVotacao)
        self.btnVotOpcao4.place(relx=0.662, rely=0.706, height=26, width=67)
        self.btnVotOpcao4.configure(activebackground="#d9d9d9")
        self.btnVotOpcao4.configure(activeforeground="black")
        self.btnVotOpcao4.configure(background="#d9d9d9")
        self.btnVotOpcao4.configure(compound='left')
        self.btnVotOpcao4.configure(disabledforeground="#a3a3a3")
        self.btnVotOpcao4.configure(foreground="black")
        self.btnVotOpcao4.configure(highlightbackground="#d9d9d9")
        self.btnVotOpcao4.configure(highlightcolor="black")
        self.btnVotOpcao4.configure(text='''Opção 4''')

        self.fStatusVotacao = tk.Frame(self.top)
        self.fStatusVotacao.place(relx=0.016, rely=0.373, relheight=0.235
                , relwidth=0.959)
        self.fStatusVotacao.configure(relief='groove')
        self.fStatusVotacao.configure(borderwidth="2")
        self.fStatusVotacao.configure(relief="groove")
        self.fStatusVotacao.configure(background="#d9d9d9")
        self.fStatusVotacao.configure(highlightbackground="#d9d9d9")
        self.fStatusVotacao.configure(highlightcolor="black")

        self.fChat = tk.Frame(self.top)
        self.fChat.place(relx=0.016, rely=0.65, relheight=0.344, relwidth=0.959)
        self.fChat.configure(relief='groove')
        self.fChat.configure(borderwidth="2")
        self.fChat.configure(relief="groove")
        self.fChat.configure(background="#d9d9d9")
        self.fChat.configure(highlightbackground="#d9d9d9")
        self.fChat.configure(highlightcolor="black")

        self.Scrolledtext2 = ScrolledText(self.fChat)
        self.Scrolledtext2.place(relx=0.017, rely=0.084, relheight=0.743
                , relwidth=0.962)
        self.Scrolledtext2.configure(background="white")
        self.Scrolledtext2.configure(exportselection="0")
        self.Scrolledtext2.configure(font="TkTextFont")
        self.Scrolledtext2.configure(foreground="black")
        self.Scrolledtext2.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext2.configure(highlightcolor="black")
        self.Scrolledtext2.configure(insertbackground="black")
        self.Scrolledtext2.configure(insertborderwidth="3")
        self.Scrolledtext2.configure(selectbackground="#d9d9d9")
        self.Scrolledtext2.configure(selectforeground="black")
        self.Scrolledtext2.configure(wrap="none")

        self.TEntryChat = ttk.Entry(self.fChat)
        self.TEntryChat.place(relx=0.017, rely=0.843, relheight=0.108
                , relwidth=0.523)
        self.TEntryChat.configure(exportselection="0")
        self.TEntryChat.configure(takefocus="")
        self.TEntryChat.configure(cursor="ibeam")

        self.lChat = tk.Label(self.fChat)
        self.lChat.place(relx=0.017, rely=0.0, height=21, width=34)
        self.lChat.configure(activebackground="#d9d9d9")
        self.lChat.configure(activeforeground="black")
        self.lChat.configure(anchor='w')
        self.lChat.configure(background="#d9d9d9")
        self.lChat.configure(compound='left')
        self.lChat.configure(disabledforeground="#a3a3a3")
        self.lChat.configure(foreground="black")
        self.lChat.configure(highlightbackground="#d9d9d9")
        self.lChat.configure(highlightcolor="black")
        self.lChat.configure(text='''Chat''')

        self.btnChatEnviarMensagem = tk.Button(self.fChat)
        self.btnChatEnviarMensagem.place(relx=0.574, rely=0.843, height=26
                , width=107)
        self.btnChatEnviarMensagem.configure(activebackground="#d9d9d9")
        self.btnChatEnviarMensagem.configure(activeforeground="black")
        self.btnChatEnviarMensagem.configure(background="#d9d9d9")
        self.btnChatEnviarMensagem.configure(compound='left')
        self.btnChatEnviarMensagem.configure(disabledforeground="#a3a3a3")
        self.btnChatEnviarMensagem.configure(foreground="black")
        self.btnChatEnviarMensagem.configure(highlightbackground="#d9d9d9")
        self.btnChatEnviarMensagem.configure(highlightcolor="black")
        self.btnChatEnviarMensagem.configure(text='''Enviar mensagem''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    interface_support.main()

# if __name__ == '__main__':
#     interface_support.main()




